name: 📈 Status Updates & Project Monitoring

on:
  schedule:
    # Keyra á hverjum þriðjudegi klukkan 8:00 UTC fyrir weekly status
    - cron: '0 8 * * 2'
    # Keyra fyrsta dag hvers mánaðar fyrir monthly report
    - cron: '0 9 1 * *'
  workflow_dispatch:
    inputs:
      report_type:
        description: 'Type of status report to generate'
        required: true
        default: 'weekly'
        type: choice
        options:
          - weekly
          - monthly
          - quarterly
      notify_team:
        description: 'Send notifications to team'
        required: false
        default: true
        type: boolean

env:
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}

jobs:
  generate-status-report:
    runs-on: ubuntu-latest
    name: 📊 Generate Project Status Report

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 30  # Need history for analysis

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 📦 Install Dependencies
        run: |
          pip install requests matplotlib seaborn pandas python-dateutil

      - name: 📊 Analyze Project Activity
        run: |
          cat > analyze_activity.py << 'EOF'
          import os
          import re
          import json
          import subprocess
          from datetime import datetime, timedelta
          from pathlib import Path
          import matplotlib.pyplot as plt
          import matplotlib.dates as mdates

          class ProjectAnalyzer:
              def __init__(self):
                  self.projects = {
                      'borg-kerfi': 'BORG kerfið',
                      'ai-stefna': 'AI Stefna',
                      'scite-innleiding': 'Scite Integration',
                      'arctic-tracker': 'Arctic Tracker',
                      'hladhvarp': 'Temjum Tæknina'
                  }
                  self.report_data = {}
                  
              def get_git_activity(self, days=7):
                  """Get git activity for the specified period"""
                  since_date = (datetime.now() - timedelta(days=days)).strftime('%Y-%m-%d')
                  
                  try:
                      # Get commit activity
                      commits_output = subprocess.check_output([
                          'git', 'log', '--since', since_date, 
                          '--pretty=format:%h|%an|%ad|%s', '--date=short'
                      ], text=True)
                      
                      commits = []
                      for line in commits_output.strip().split('\n'):
                          if line:
                              parts = line.split('|', 3)
                              if len(parts) == 4:
                                  commits.append({
                                      'hash': parts[0],
                                      'author': parts[1],
                                      'date': parts[2],
                                      'message': parts[3]
                                  })
                      
                      return commits
                  except subprocess.CalledProcessError:
                      return []
              
              def analyze_project_status(self):
                  """Analyze current status of all projects"""
                  project_status = {}
                  
                  for project_id, project_name in self.projects.items():
                      readme_path = f"verkefni/{project_id}/README.md"
                      
                      if not os.path.exists(readme_path):
                          project_status[project_id] = {
                              'name': project_name,
                              'status': 'Unknown',
                              'progress': 0,
                              'last_updated': 'Never',
                              'word_count': 0
                          }
                          continue
                      
                      try:
                          with open(readme_path, 'r', encoding='utf-8') as f:
                              content = f.read()
                          
                          # Extract status from badges
                          status = self._extract_status(content)
                          progress = self._extract_progress(content)
                          
                          # Get file modification time
                          mod_time = os.path.getmtime(readme_path)
                          last_updated = datetime.fromtimestamp(mod_time).strftime('%Y-%m-%d')
                          
                          # Word count
                          word_count = len(content.split())
                          
                          project_status[project_id] = {
                              'name': project_name,
                              'status': status,
                              'progress': progress,
                              'last_updated': last_updated,
                              'word_count': word_count
                          }
                          
                      except Exception as e:
                          print(f"Error analyzing {project_id}: {e}")
                          project_status[project_id] = {
                              'name': project_name,
                              'status': 'Error',
                              'progress': 0,
                              'last_updated': 'Error',
                              'word_count': 0
                          }
                  
                  return project_status
              
              def _extract_status(self, content):
                  """Extract status from markdown content"""
                  # Look for status badges
                  status_patterns = [
                      (r'Status-Production[^)]*', 'Lokið'),
                      (r'Status-Live[^)]*', 'Lokið'),
                      (r'Status-Complete[^)]*', 'Lokið'),
                      (r'Status-Launched[^)]*', 'Lokið'),
                      (r'Status-Development[^)]*', 'Í vinnslu'),
                      (r'Status-Progress[^)]*', 'Í vinnslu'),
                      (r'Status-Beta[^)]*', 'Í vinnslu'),
                      (r'Status-Alpha[^)]*', 'Í vinnslu'),
                      (r'Status-Planning[^)]*', 'Hugmynd'),
                      (r'Status-Consultation[^)]*', 'Samráð'),
                  ]
                  
                  for pattern, status in status_patterns:
                      if re.search(pattern, content, re.IGNORECASE):
                          return status
                  
                  return 'Unknown'
              
              def _extract_progress(self, content):
                  """Extract progress percentage from content"""
                  # Look for progress badges
                  progress_match = re.search(r'Progress-(\d+)%', content)
                  if progress_match:
                      return int(progress_match.group(1))
                  
                  # Look for progress in text
                  progress_match = re.search(r'(\d+)%[^a-zA-Z]*progress', content, re.IGNORECASE)
                  if progress_match:
                      return int(progress_match.group(1))
                  
                  return 0
              
              def generate_weekly_report(self):
                  """Generate weekly status report"""
                  print("📊 Generating weekly status report...")
                  
                  # Get recent activity
                  commits = self.get_git_activity(7)
                  project_status = self.analyze_project_status()
                  
                  report = {
                      'type': 'weekly',
                      'generated_at': datetime.now().isoformat(),
                      'period': {
                          'start': (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d'),
                          'end': datetime.now().strftime('%Y-%m-%d')
                      },
                      'activity': {
                          'total_commits': len(commits),
                          'active_projects': len([p for p in project_status.values() if p['last_updated'] >= (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')]),
                      },
                      'projects': project_status,
                      'commits': commits[:10]  # Latest 10 commits
                  }
                  
                  return report
              
              def generate_monthly_report(self):
                  """Generate monthly status report"""
                  print("📊 Generating monthly status report...")
                  
                  # Get recent activity
                  commits = self.get_git_activity(30)
                  project_status = self.analyze_project_status()
                  
                  # Calculate monthly metrics
                  monthly_commits = len(commits)
                  avg_commits_per_week = monthly_commits / 4.33
                  
                  active_projects = len([p for p in project_status.values() 
                                       if p['last_updated'] >= (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d')])
                  
                  total_progress = sum(p['progress'] for p in project_status.values())
                  avg_progress = total_progress / len(project_status) if project_status else 0
                  
                  report = {
                      'type': 'monthly',
                      'generated_at': datetime.now().isoformat(),
                      'period': {
                          'start': (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d'),
                          'end': datetime.now().strftime('%Y-%m-%d')
                      },
                      'metrics': {
                          'total_commits': monthly_commits,
                          'avg_commits_per_week': round(avg_commits_per_week, 1),
                          'active_projects': active_projects,
                          'avg_progress': round(avg_progress, 1),
                          'completed_projects': len([p for p in project_status.values() if p['status'] == 'Lokið'])
                      },
                      'projects': project_status,
                      'top_commits': commits[:15]
                  }
                  
                  return report
              
              def create_visualization(self, report_data):
                  """Create visualizations for the report"""
                  fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(12, 10))
                  
                  # Project status distribution
                  statuses = [p['status'] for p in report_data['projects'].values()]
                  status_counts = {}
                  for status in statuses:
                      status_counts[status] = status_counts.get(status, 0) + 1
                  
                  ax1.pie(status_counts.values(), labels=status_counts.keys(), autopct='%1.1f%%')
                  ax1.set_title('Project Status Distribution')
                  
                  # Progress by project
                  projects = list(report_data['projects'].keys())
                  progress = [report_data['projects'][p]['progress'] for p in projects]
                  
                  ax2.barh(projects, progress)
                  ax2.set_xlabel('Progress (%)')
                  ax2.set_title('Project Progress')
                  ax2.set_xlim(0, 100)
                  
                  # Documentation size
                  word_counts = [report_data['projects'][p]['word_count'] for p in projects]
                  ax3.bar(projects, word_counts)
                  ax3.set_ylabel('Word Count')
                  ax3.set_title('Documentation Size')
                  ax3.tick_params(axis='x', rotation=45)
                  
                  # Activity timeline (if monthly report)
                  if report_data['type'] == 'monthly' and report_data.get('top_commits'):
                      commit_dates = [commit['date'] for commit in report_data['top_commits']]
                      date_counts = {}
                      for date in commit_dates:
                          date_counts[date] = date_counts.get(date, 0) + 1
                      
                      dates = sorted(date_counts.keys())
                      counts = [date_counts[date] for date in dates]
                      
                      ax4.plot(dates, counts, marker='o')
                      ax4.set_xlabel('Date')
                      ax4.set_ylabel('Commits')
                      ax4.set_title('Commit Activity')
                      ax4.tick_params(axis='x', rotation=45)
                  else:
                      ax4.text(0.5, 0.5, 'Activity chart\n(Monthly reports only)', 
                              ha='center', va='center', transform=ax4.transAxes)
                      ax4.set_title('Activity Timeline')
                  
                  plt.tight_layout()
                  plt.savefig('status_report_charts.png', dpi=150, bbox_inches='tight')
                  plt.close()
                  
                  print("📊 Charts saved to status_report_charts.png")

          def main():
              analyzer = ProjectAnalyzer()
              
              # Determine report type
              report_type = os.environ.get('REPORT_TYPE', 'weekly')
              if datetime.now().day == 1:  # First day of month
                  report_type = 'monthly'
              
              print(f"🚀 Generating {report_type} report...")
              
              if report_type == 'monthly':
                  report_data = analyzer.generate_monthly_report()
              else:
                  report_data = analyzer.generate_weekly_report()
              
              # Save report data
              with open('status_report.json', 'w', encoding='utf-8') as f:
                  json.dump(report_data, f, indent=2, ensure_ascii=False)
              
              # Create visualizations
              analyzer.create_visualization(report_data)
              
              print("✅ Status report generated successfully")
              return report_data

          if __name__ == "__main__":
              main()
          EOF

          # Set report type based on input or schedule
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            export REPORT_TYPE="${{ inputs.report_type }}"
          else
            export REPORT_TYPE="weekly"
          fi

          python analyze_activity.py

      - name: 📝 Generate Markdown Report
        run: |
          cat > generate_markdown_report.py << 'EOF'
          import json
          from datetime import datetime

          def generate_markdown_report():
              with open('status_report.json', 'r', encoding='utf-8') as f:
                  data = json.load(f)
              
              report_type = data['type'].title()
              generated_at = datetime.fromisoformat(data['generated_at']).strftime('%Y-%m-%d %H:%M')
              
              md_content = f"""# 📈 {report_type} Status Report

*Generated: {generated_at}*

## 📊 Summary

**Period**: {data['period']['start']} to {data['period']['end']}
"""
              
              if data['type'] == 'weekly':
                  md_content += f"""
**Activity**:
- 🔄 **Total commits**: {data['activity']['total_commits']}
- 🏗️ **Active projects**: {data['activity']['active_projects']}/5
"""
              else:  # monthly
                  metrics = data['metrics']
                  md_content += f"""
**Monthly Metrics**:
- 🔄 **Total commits**: {metrics['total_commits']}
- 📊 **Avg commits/week**: {metrics['avg_commits_per_week']}
- 🏗️ **Active projects**: {metrics['active_projects']}/5
- 📈 **Average progress**: {metrics['avg_progress']}%
- ✅ **Completed projects**: {metrics['completed_projects']}
"""
              
              md_content += "\n## 🎯 Project Status\n\n"
              
              # Project status table
              md_content += "| Project | Status | Progress | Last Updated | Documentation |\n"
              md_content += "|---------|--------|----------|--------------|---------------|\n"
              
              for project_id, project in data['projects'].items():
                  status_emoji = {
                      'Lokið': '✅',
                      'Í vinnslu': '🟡',
                      'Hugmynd': '🔵',
                      'Samráð': '🟠',
                      'Unknown': '❓',
                      'Error': '❌'
                  }.get(project['status'], '❓')
                  
                  progress_bar = '█' * (project['progress'] // 10) + '░' * (10 - project['progress'] // 10)
                  word_count = f"{project['word_count']:,} words"
                  
                  md_content += f"| {project['name']} | {status_emoji} {project['status']} | {project['progress']}% `{progress_bar}` | {project['last_updated']} | {word_count} |\n"
              
              # Recent activity
              if data.get('commits'):
                  md_content += f"\n## 🔄 Recent Activity ({len(data['commits'])} commits)\n\n"
                  for commit in data['commits'][:5]:  # Show top 5
                      md_content += f"- **{commit['date']}** [{commit['hash']}] {commit['message']} *by {commit['author']}*\n"
                  
                  if len(data['commits']) > 5:
                      md_content += f"\n*... and {len(data['commits']) - 5} more commits*\n"
              
              # Action items (for monthly reports)
              if data['type'] == 'monthly':
                  md_content += "\n## 🎯 Action Items\n\n"
                  
                  stale_projects = [p for p in data['projects'].values() 
                                  if p['last_updated'] < data['period']['start']]
                  
                  if stale_projects:
                      md_content += "### 📋 Projects needing attention:\n"
                      for project in stale_projects:
                          md_content += f"- **{project['name']}**: Last updated {project['last_updated']}\n"
                  
                  low_progress = [p for p in data['projects'].values() 
                                if p['progress'] < 25 and p['status'] == 'Í vinnslu']
                  
                  if low_progress:
                      md_content += "\n### 🚀 Projects to prioritize:\n"
                      for project in low_progress:
                          md_content += f"- **{project['name']}**: Only {project['progress']}% complete\n"
              
              # Footer
              md_content += f"""
---

📊 **Charts**: See attached visualization images
🔗 **Repository**: [gervigreind-unak](https://github.com/magnussmari/gervigreind-unak)
📝 **Issues**: [Create new issue](https://github.com/magnussmari/gervigreind-unak/issues/new)

*This report was automatically generated by GitHub Actions*
"""
              
              with open('status_report.md', 'w', encoding='utf-8') as f:
                  f.write(md_content)
              
              print("📝 Markdown report generated: status_report.md")

          generate_markdown_report()
          EOF

          python generate_markdown_report.py

      - name: 📤 Upload Report Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: status-report-${{ github.run_number }}
          path: |
            status_report.md
            status_report.json
            status_report_charts.png
          retention-days: 90

      - name: 📢 Send Slack Notification
        if: env.SLACK_WEBHOOK_URL && (inputs.notify_team == true || inputs.notify_team == '')
        run: |
          # Extract key metrics for Slack
          TOTAL_COMMITS=$(jq -r '.activity.total_commits // .metrics.total_commits' status_report.json)
          ACTIVE_PROJECTS=$(jq -r '.activity.active_projects // .metrics.active_projects' status_report.json)
          REPORT_TYPE=$(jq -r '.type' status_report.json)
          
          # Create Slack message
          cat > slack_message.json << EOF
          {
            "text": "📈 ${REPORT_TYPE^} AI Projects Status Report",
            "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "📈 ${REPORT_TYPE^} AI Projects Status Report"
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "🔄 *${TOTAL_COMMITS} commits* | 🏗️ *${ACTIVE_PROJECTS}/5 active projects*"
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "📊 Full report available in GitHub Actions artifacts\n🔗 <https://github.com/${GITHUB_REPOSITORY}/actions|View Details>"
                }
              }
            ]
          }
          EOF
          
          curl -X POST -H 'Content-type: application/json' \
            --data @slack_message.json \
            "${SLACK_WEBHOOK_URL}"

      - name: 📧 Create Issue for Monthly Report
        if: contains(github.event.schedule, '1 *') || inputs.report_type == 'monthly'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Read the markdown report
            const reportContent = fs.readFileSync('status_report.md', 'utf8');
            
            // Create issue with monthly report
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `📈 Monthly Status Report - ${new Date().toISOString().slice(0, 7)}`,
              body: reportContent,
              labels: ['status-report', 'monthly', 'automated']
            });
            
            console.log(`Created issue #${issue.data.number} with monthly report`);

      - name: 📊 Update Repository README badges
        run: |
          # Update activity badge in main README
          TOTAL_COMMITS=$(jq -r '.activity.total_commits // .metrics.total_commits' status_report.json)
          LAST_UPDATED=$(date +%Y-%m-%d)
          
          # This would update badges in README.md
          echo "📊 Repository metrics updated:"
          echo "  - Last activity check: ${LAST_UPDATED}"
          echo "  - Recent commits: ${TOTAL_COMMITS}"
          
          # Could implement badge updates here
          echo "Badge updates would be implemented here"

      - name: 🎯 Performance Summary
        run: |
          echo "## 🎯 Performance Summary"
          echo "Generated reports for $(jq -r 'keys | length' status_report.json) projects"
          echo "Report type: $(jq -r '.type' status_report.json)"
          echo "Charts created: ✅"
          echo "Artifacts uploaded: ✅"
          
          if [ -n "${SLACK_WEBHOOK_URL}" ]; then
            echo "Slack notification: ✅"
          else
            echo "Slack notification: ⏭️ (not configured)"
          fi
